(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{328:function(a,t,e){"use strict";e.r(t);var s=e(38),n=Object(s.a)({},function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"如何实现一个元素的水平居中"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何实现一个元素的水平居中","aria-hidden":"true"}},[a._v("#")]),a._v(" 如何实现一个元素的水平居中")]),a._v(" "),e("h2",{attrs:{id:"仅居中元素定宽高适用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#仅居中元素定宽高适用","aria-hidden":"true"}},[a._v("#")]),a._v(" 仅居中元素定宽高适用")]),a._v(" "),e("ul",[e("li",[a._v("absolute + 负margin")]),a._v(" "),e("li",[a._v("absolute + margin auto")]),a._v(" "),e("li",[a._v("absolute + calc")])]),a._v(" "),e("h2",{attrs:{id:"居中元素不定宽高"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#居中元素不定宽高","aria-hidden":"true"}},[a._v("#")]),a._v(" 居中元素不定宽高")]),a._v(" "),e("ul",[e("li",[a._v("absolute + transform")]),a._v(" "),e("li",[a._v("lineheight")]),a._v(" "),e("li",[a._v("writing-mode")]),a._v(" "),e("li",[a._v("table")]),a._v(" "),e("li",[a._v("css-table")]),a._v(" "),e("li",[a._v("flex")]),a._v(" "),e("li",[a._v("grid")])]),a._v(" "),e("h3",{attrs:{id:"absolute-负margin"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#absolute-负margin","aria-hidden":"true"}},[a._v("#")]),a._v(" absolute + 负margin")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('<div class="wp">\n    <div class="box size">123123</div>\n</div>\n')])])]),e("p",[a._v("为了实现上面的效果先来做些准备工作，假设HTML代码如下，总共两个元素，父元素和子元素")]),a._v(" "),e("p",[a._v("wp是父元素的类名，box是子元素的类名，因为有定宽和不定宽的区别，size用来表示指定宽度，下面是所有效果都要用到的公共代码，主要是设置颜色和宽高")]),a._v(" "),e("p",[e("em",[e("strong",[a._v("注意：后面不在重复这段公共代码，只会给出相应提示")])])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("/* 公共代码 */\n.wp {\n    border: 1px solid red;\n    width: 300px;\n    height: 300px;\n}\n\n.box {\n    background: green;    \n}\n\n.box.size{\n    width: 100px;\n    height: 100px;\n}\n/* 公共代码 */\n")])])]),e("p",[a._v("绝对定位的百分比是相对于父元素的宽高，通过这个特性可以让子元素的居中显示，但绝对定位是基于子元素的左上角，期望的效果是子元素的中心居中显示")]),a._v(" "),e("p",[a._v("为了修正这个问题，可以借助外边距的负值，负的外边距可以让元素向相反方向定位，通过指定子元素的外边距为子元素宽度一半的负值，就可以让子元素居中了，css代码如下")]),a._v(" "),e("p",[a._v("绝对定位的百分比是相对于父元素的宽高，通过这个特性可以让子元素的居中显示，但绝对定位是基于子元素的左上角，期望的效果是子元素的中心居中显示")]),a._v(" "),e("p",[a._v("为了修正这个问题，可以借助外边距的负值，负的外边距可以让元素向相反方向定位，通过指定子元素的外边距为子元素宽度一半的负值，就可以让子元素居中了，css代码如下")]),a._v(" "),e("p",[a._v("这是我比较常用的方式，这种方式比较好理解，兼容性也很好，缺点是需要知道子元素的宽高")]),a._v(" "),e("h3",{attrs:{id:"absolute-margin-auto"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#absolute-margin-auto","aria-hidden":"true"}},[a._v("#")]),a._v(" absolute + margin auto")]),a._v(" "),e("p",[a._v("这种方式也要求居中元素的宽高必须固定，HTML代码如下")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('<div class="wp">\n    <div class="box size">123123</div>\n</div>\n')])])]),e("p",[a._v("这种方式通过设置各个方向的距离都是0，此时再讲margin设为auto，就可以在各个方向上居中了")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("/* 此处引用上面的公共代码 */\n/* 此处引用上面的公共代码 */\n\n/* 定位代码 */\n.wp {\n    position: relative;\n}\n.box {\n    position: absolute;;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    margin: auto;\n}\n这种方法兼容性也很好，缺点是需要知道子元素的宽高\n")])])]),e("h3",{attrs:{id:"absolute-calc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#absolute-calc","aria-hidden":"true"}},[a._v("#")]),a._v(" absolute + calc")]),a._v(" "),e("p",[a._v("这种方式也要求居中元素的宽高必须固定，所以我们为box增加size类，HTML代码如下")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('<div class="wp">\n    <div class="box size">123123</div>\n</div>\n')])])]),e("p",[a._v("感谢css3带来了计算属性，既然top的百分比是基于元素的左上角，那么在减去宽度的一半就好了，代码如下")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("/* 此处引用上面的公共代码 */\n/* 此处引用上面的公共代码 */\n\n/* 定位代码 */\n.wp {\n    position: relative;\n}\n.box {\n    position: absolute;;\n    top: calc(50% - 50px);\n    left: calc(50% - 50px);\n}\n")])])]),e("p",[a._v("这种方法兼容性依赖calc的兼容性，缺点是需要知道子元素的宽高")]),a._v(" "),e("h3",{attrs:{id:"absolute-transform"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#absolute-transform","aria-hidden":"true"}},[a._v("#")]),a._v(" absolute + transform")]),a._v(" "),e("p",[a._v("还是绝对定位，但这个方法不需要子元素固定宽高，所以不再需要size类了，HTML代码如下")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('<div class="wp">\n    <div class="box">123123</div>\n</div>\n')])])]),e("p",[a._v("修复绝对定位的问题，还可以使用css3新增的transform，transform的translate属性也可以设置百分比，其是相对于自身的宽和高，所以可以讲translate设置为-50%，就可以做到居中了，代码如下")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("/* 此处引用上面的公共代码 */\n/* 此处引用上面的公共代码 */\n\n/* 定位代码 */\n.wp {\n    position: relative;\n}\n.box {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n}\n")])])]),e("p",[a._v("这种方法兼容性依赖translate2d的兼容性")]),a._v(" "),e("h3",{attrs:{id:"lineheight"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lineheight","aria-hidden":"true"}},[a._v("#")]),a._v(" lineheight")]),a._v(" "),e("p",[a._v("利用行内元素居中属性也可以做到水平垂直居中，HTML代码如下")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('<div class="wp">\n    <div class="box">123123</div>\n</div>\n')])])]),e("p",[a._v("把box设置为行内元素，通过text-align就可以做到水平居中，但很多同学可能不知道通过通过vertical-align也可以在垂直方向做到居中，代码如下")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("/* 此处引用上面的公共代码 */\n/* 此处引用上面的公共代码 */\n\n/* 定位代码 */\n.wp {\n    line-height: 300px;\n    text-align: center;\n    font-size: 0px;\n}\n.box {\n    font-size: 16px;\n    display: inline-block;\n    vertical-align: middle;\n    line-height: initial;\n    text-align: left; /* 修正文字 */\n}\n")])])]),e("p",[a._v("这种方法需要在子元素中将文字显示重置为想要的效果")]),a._v(" "),e("h3",{attrs:{id:"writing-mode"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#writing-mode","aria-hidden":"true"}},[a._v("#")]),a._v(" writing-mode")]),a._v(" "),e("p",[a._v("很多同学一定和我一样不知道writing-mode属性，感谢@张鑫旭老师的反馈，简单来说writing-mode可以改变文字的显示方向，比如可以通过writing-mode让文字的显示变为垂直方向")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('<div class="div1">水平方向</div>\n<div class="div2">垂直方向</div>\n.div2 {\n    writing-mode: vertical-lr;\n}\n')])])]),e("p",[a._v("显示效果如下：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("水平方向\n垂\n直\n方\n向\n")])])]),e("p",[a._v("更神奇的是所有水平方向上的css属性，都会变为垂直方向上的属性，比如text-align，通过writing-mode和text-align就可以做到水平和垂直方向的居中了，只不过要稍微麻烦一点")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('<div class="wp">\n    <div class="wp-inner">\n        <div class="box">123123</div>\n    </div>\n</div>\n/* 此处引用上面的公共代码 */\n/* 此处引用上面的公共代码 */\n\n/* 定位代码 */\n.wp {\n    writing-mode: vertical-lr;\n    text-align: center;\n}\n.wp-inner {\n    writing-mode: horizontal-tb;\n    display: inline-block;\n    text-align: center;\n    width: 100%;\n}\n.box {\n    display: inline-block;\n    margin: auto;\n    text-align: left;\n}\n')])])]),e("p",[a._v("这种方法实现起来和理解起来都稍微有些复杂")]),a._v(" "),e("h3",{attrs:{id:"table"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#table","aria-hidden":"true"}},[a._v("#")]),a._v(" table")]),a._v(" "),e("p",[a._v("曾经table被用来做页面布局，现在没人这么做了，但table也能够实现水平垂直居中，但是会增加很多冗余代码")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('<table>\n    <tbody>\n        <tr>\n            <td class="wp">\n                <div class="box">123123</div>\n            </td>\n        </tr>\n    </tbody>\n</table>\ntabel单元格中的内容天然就是垂直居中的，只要添加一个水平居中属性就好了\n\n.wp {\n    text-align: center;\n}\n.box {\n    display: inline-block;\n}\n')])])]),e("p",[a._v("这种方法就是代码太冗余，而且也不是table的正确用法")]),a._v(" "),e("h3",{attrs:{id:"css-table"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#css-table","aria-hidden":"true"}},[a._v("#")]),a._v(" css-table")]),a._v(" "),e("p",[a._v("css新增的table属性，可以让我们把普通元素，变为table元素的现实效果，通过这个特性也可以实现水平垂直居中")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('<div class="wp">\n    <div class="box">123123</div>\n</div>\n下面通过css属性，可以让div显示的和table一样\n\n.wp {\n    display: table-cell;\n    text-align: center;\n    vertical-align: middle;\n}\n.box {\n    display: inline-block;\n}\n')])])]),e("p",[a._v("这种方法和table一样的原理，但却没有那么多冗余代码，兼容性也还不错")]),a._v(" "),e("h3",{attrs:{id:"flex"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#flex","aria-hidden":"true"}},[a._v("#")]),a._v(" flex")]),a._v(" "),e("p",[a._v("flex作为现代的布局方案，颠覆了过去的经验，只需几行代码就可以优雅的做到水平垂直居中")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('<div class="wp">\n    <div class="box">123123</div>\n</div>\n.wp {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n')])])]),e("p",[a._v("目前在移动端已经完全可以使用flex了，PC端需要看自己业务的兼容性情况")]),a._v(" "),e("h3",{attrs:{id:"grid"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#grid","aria-hidden":"true"}},[a._v("#")]),a._v(" grid")]),a._v(" "),e("p",[a._v("感谢@一丝姐 反馈的这个方案，css新出的网格布局，由于兼容性不太好，一直没太关注，通过grid也可以实现水平垂直居中")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('<div class="wp">\n    <div class="box">123123</div>\n</div>\n.wp {\n    display: grid;\n}\n.box {\n    align-self: center;\n    justify-self: center;\n}\n')])])]),e("p",[a._v("代码量也很少，但兼容性不如flex，不推荐使用")]),a._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),e("p",[a._v("下面对比下各个方式的优缺点，肯定又双叒叕该有同学说回字的写法了，简单总结下")]),a._v(" "),e("p",[a._v("PC端有兼容性要求，宽高固定，推荐absolute + 负margin\nPC端有兼容要求，宽高不固定，推荐css-table\nPC端无兼容性要求，推荐flex\n移动端推荐使用flex")]),a._v(" "),e("p",[e("em",[e("strong",[a._v("小贴士：关于flex的兼容性决方案，请看这里"),e("a",{attrs:{href:"https://yanhaijing.com/css/2016/08/21/flex-practice-on-mobile/",target:"_blank",rel:"noopener noreferrer"}},[a._v("《移动端flex布局实战》"),e("OutboundLink")],1)])])])])},[],!1,null,null,null);t.default=n.exports}}]);